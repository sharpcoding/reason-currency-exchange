// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var AppSettings$ReactHooksTemplate = require("./AppSettings.bs.js");

function url(currencyCode) {
  return "" + (String(AppSettings$ReactHooksTemplate.nbpApiBaseUrl) + ("/" + (String(currencyCode) + "/")));
}

function exchangeRateItemDecoder(json) {
  return /* record */[
          /* no */Json_decode.field("no", Json_decode.string, json),
          /* effectiveDate */Json_decode.field("effectiveDate", Json_decode.string, json),
          /* mid */Json_decode.field("mid", Json_decode.$$float, json)
        ];
}

function exchangeRateDecoder(json) {
  return /* record */[
          /* table */Json_decode.field("table", Json_decode.string, json),
          /* currency */Json_decode.field("currency", Json_decode.string, json),
          /* code */Json_decode.field("code", Json_decode.string, json),
          /* rates */Json_decode.field("rates", (function (param) {
                  return Json_decode.array(exchangeRateItemDecoder, param);
                }), json)
        ];
}

var JsonDecode = {
  exchangeRateItemDecoder: exchangeRateItemDecoder,
  exchangeRateDecoder: exchangeRateDecoder
};

function jsonToCurrencyExchangeModel(json) {
  var match = Belt_List.fromArray(json[/* rates */3]);
  if (match) {
    var head = match[0];
    return /* record */[
            /* currencyCode */json[/* code */2],
            /* point *//* record */[
              /* rate */head[/* mid */2],
              /* date */head[/* effectiveDate */1]
            ]
          ];
  } else {
    return /* record */[
            /* currencyCode */json[/* code */2],
            /* point */undefined
          ];
  }
}

var Dto = {
  jsonToCurrencyExchangeModel: jsonToCurrencyExchangeModel
};

function fetchCurrency(currencyCode) {
  return fetch(url(currencyCode)).then((function (prim) {
                  return prim.json();
                })).then((function (json) {
                var transformed = exchangeRateDecoder(json);
                return Promise.resolve(jsonToCurrencyExchangeModel(transformed));
              }));
}

function fetchCurrencies(currencyCodes, callback) {
  Promise.all(Belt_List.toArray(Belt_List.map(currencyCodes, fetchCurrency))).then((function (response) {
          Curry._1(callback, Belt_List.fromArray(response));
          return Promise.resolve(/* () */0);
        }));
  return /* () */0;
}

exports.url = url;
exports.JsonDecode = JsonDecode;
exports.Dto = Dto;
exports.fetchCurrency = fetchCurrency;
exports.fetchCurrencies = fetchCurrencies;
/* No side effect */
