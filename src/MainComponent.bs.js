// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var HttpService$ReactHooksTemplate = require("./HttpService.bs.js");
var MainComponentAux$ReactHooksTemplate = require("./MainComponentAux.bs.js");
var ListItemComponent$ReactHooksTemplate = require("./ListItemComponent.bs.js");
var CurrenciesComponent$ReactHooksTemplate = require("./CurrenciesComponent.bs.js");

var initialCurrencyInfo = /* :: */[
  /* record */[
    /* currencyCode */"USD",
    /* point */undefined
  ],
  /* :: */[
    /* record */[
      /* currencyCode */"EUR",
      /* point */undefined
    ],
    /* :: */[
      /* record */[
        /* currencyCode */"CHF",
        /* point */undefined
      ],
      /* [] */0
    ]
  ]
];

var initialCurrenciesFilteredSorted = MainComponentAux$ReactHooksTemplate.currenciesfilteredSorted(Belt_List.map(initialCurrencyInfo, (function (c) {
            return c[/* currencyCode */0];
          })));

var initialState_002 = /* userSelectedCurrencyCode */initialCurrenciesFilteredSorted ? initialCurrenciesFilteredSorted[0][/* currencyCode */0] : "";

var initialState = /* record */[
  /* inSelectCurrencies */initialCurrenciesFilteredSorted,
  /* currencyInfo */initialCurrencyInfo,
  initialState_002,
  /* httpOperation : None */0
];

function MainComponent(Props) {
  var match = React.useReducer((function (state, action) {
          if (typeof action === "number") {
            return /* record */[
                    /* inSelectCurrencies */state[/* inSelectCurrencies */0],
                    /* currencyInfo */state[/* currencyInfo */1],
                    /* userSelectedCurrencyCode */state[/* userSelectedCurrencyCode */2],
                    /* httpOperation : AllCurrenciesLoading */1
                  ];
          } else {
            switch (action.tag | 0) {
              case /* FinishLoadingAllSelectedCurrencies */0 :
                  return /* record */[
                          /* inSelectCurrencies */state[/* inSelectCurrencies */0],
                          /* currencyInfo */action[0],
                          /* userSelectedCurrencyCode */state[/* userSelectedCurrencyCode */2],
                          /* httpOperation : None */0
                        ];
              case /* SetUserSelectedCurrency */1 :
                  return /* record */[
                          /* inSelectCurrencies */state[/* inSelectCurrencies */0],
                          /* currencyInfo */state[/* currencyInfo */1],
                          /* userSelectedCurrencyCode */action[0],
                          /* httpOperation */state[/* httpOperation */3]
                        ];
              case /* RemoveCurrency */2 :
                  var currencyCode = action[0];
                  var newCurrencyInfo = Belt_List.reduce(state[/* currencyInfo */1], /* [] */0, (function (acc, el) {
                          var match = el[/* currencyCode */0] === currencyCode;
                          if (match) {
                            return acc;
                          } else {
                            return Belt_List.concat(acc, /* :: */[
                                        el,
                                        /* [] */0
                                      ]);
                          }
                        }));
                  var newInSelectCurrencies = MainComponentAux$ReactHooksTemplate.currenciesfilteredSorted(Belt_List.map(newCurrencyInfo, (function (c) {
                              return c[/* currencyCode */0];
                            })));
                  return /* record */[
                          /* inSelectCurrencies */newInSelectCurrencies,
                          /* currencyInfo */newCurrencyInfo,
                          /* userSelectedCurrencyCode */state[/* userSelectedCurrencyCode */2],
                          /* httpOperation */state[/* httpOperation */3]
                        ];
              case /* StartLoadingSingleCurrency */3 :
                  var currencyCode$1 = action[0];
                  var match = Belt_List.filter(state[/* currencyInfo */1], (function (el) {
                          return el[/* currencyCode */0] === currencyCode$1;
                        }));
                  if (match && !match[1]) {
                    return /* record */[
                            /* inSelectCurrencies */state[/* inSelectCurrencies */0],
                            /* currencyInfo */state[/* currencyInfo */1],
                            /* userSelectedCurrencyCode */state[/* userSelectedCurrencyCode */2],
                            /* httpOperation : SingleCurrencyLoading */2
                          ];
                  }
                  return /* record */[
                          /* inSelectCurrencies */state[/* inSelectCurrencies */0],
                          /* currencyInfo */Belt_List.concat(state[/* currencyInfo */1], /* :: */[
                                /* record */[
                                  /* currencyCode */currencyCode$1,
                                  /* point */undefined
                                ],
                                /* [] */0
                              ]),
                          /* userSelectedCurrencyCode */state[/* userSelectedCurrencyCode */2],
                          /* httpOperation : SingleCurrencyLoading */2
                        ];
              case /* FinishLoadingSingleCurrency */4 :
                  var payload = action[0];
                  var newCurrencyInfo$1 = Belt_List.reduce(state[/* currencyInfo */1], /* [] */0, (function (acc, el) {
                          var match = el[/* currencyCode */0] === payload[/* currencyCode */0];
                          var ne = match ? /* record */[
                              /* currencyCode */el[/* currencyCode */0],
                              /* point */payload[/* point */1]
                            ] : el;
                          return Belt_List.concat(acc, /* :: */[
                                      ne,
                                      /* [] */0
                                    ]);
                        }));
                  var newInSelectCurrencies$1 = MainComponentAux$ReactHooksTemplate.currenciesfilteredSorted(Belt_List.map(newCurrencyInfo$1, (function (c) {
                              return c[/* currencyCode */0];
                            })));
                  return /* record */[
                          /* inSelectCurrencies */newInSelectCurrencies$1,
                          /* currencyInfo */newCurrencyInfo$1,
                          /* userSelectedCurrencyCode */newInSelectCurrencies$1 ? newInSelectCurrencies$1[0][/* currencyCode */0] : "",
                          /* httpOperation : None */0
                        ];
              
            }
          }
        }), initialState);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          Curry._1(dispatch, /* StartLoadingAllSelectedCurrencies */0);
          return ;
        }), ([]));
  React.useEffect((function () {
          var match = state[/* httpOperation */3];
          switch (match) {
            case /* None */0 :
                return ;
            case /* AllCurrenciesLoading */1 :
                var currencies = Belt_List.map(state[/* currencyInfo */1], (function (ci) {
                        return ci[/* currencyCode */0];
                      }));
                HttpService$ReactHooksTemplate.fetchCurrencies(currencies, (function (response) {
                        return Curry._1(dispatch, /* FinishLoadingAllSelectedCurrencies */Block.__(0, [response]));
                      }));
                return ;
            case /* SingleCurrencyLoading */2 :
                HttpService$ReactHooksTemplate.fetchCurrencies(/* :: */[
                      state[/* userSelectedCurrencyCode */2],
                      /* [] */0
                    ], (function (response) {
                        if (response) {
                          return Curry._1(dispatch, /* FinishLoadingSingleCurrency */Block.__(4, [response[0]]));
                        } else {
                          return /* () */0;
                        }
                      }));
                return ;
            
          }
        }), Belt_List.toArray(/* :: */[
            state[/* httpOperation */3],
            /* [] */0
          ]));
  var match$1 = state[/* httpOperation */3] === /* None */0;
  return React.createElement(React.Fragment, undefined, React.createElement("h3", undefined, "ReasonML demo exchange rate application"), React.createElement("div", undefined, React.createElement(CurrenciesComponent$ReactHooksTemplate.make, {
                      currencies: state[/* inSelectCurrencies */0],
                      onSelectCurrency: (function (currencyCode) {
                          return Curry._1(dispatch, /* SetUserSelectedCurrency */Block.__(1, [currencyCode]));
                        })
                    }), React.createElement("button", {
                      onClick: (function (param) {
                          return Curry._1(dispatch, /* StartLoadingSingleCurrency */Block.__(3, [state[/* userSelectedCurrencyCode */2]]));
                        })
                    }, "Add and load exchange rate"), Belt_List.toArray(Belt_List.map(state[/* currencyInfo */1], (function (i) {
                            return React.createElement(ListItemComponent$ReactHooksTemplate.make, {
                                        item: MainComponentAux$ReactHooksTemplate.convertInAppCurrencyToListItem(i),
                                        onRemove: (function (currencyCode) {
                                            return Curry._1(dispatch, /* RemoveCurrency */Block.__(2, [currencyCode]));
                                          }),
                                        key: i[/* currencyCode */0]
                                      });
                          }))), React.createElement("button", {
                      onClick: (function (param) {
                          return Curry._1(dispatch, /* StartLoadingAllSelectedCurrencies */0);
                        })
                    }, "Refresh all rates"), React.createElement("hr", undefined), match$1 ? React.createElement("div", undefined, "Incative") : React.createElement("div", undefined, "Loading...")));
}

var make = MainComponent;

exports.initialCurrencyInfo = initialCurrencyInfo;
exports.initialCurrenciesFilteredSorted = initialCurrenciesFilteredSorted;
exports.initialState = initialState;
exports.make = make;
/* initialCurrenciesFilteredSorted Not a pure module */
